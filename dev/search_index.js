var documenterSearchIndex = {"docs":
[{"location":"mesa/#Agents.jl-vs-Mesa:-speed-comparison-1","page":"Comparison against Mesa (Python)","title":"Agents.jl vs Mesa: speed comparison","text":"","category":"section"},{"location":"mesa/#","page":"Comparison against Mesa (Python)","title":"Comparison against Mesa (Python)","text":"Julia code can run much faster than Python. And since Agents.jl is a minimal framework, an agent-based model written in Julia and using Agents.jl can be much faster than the same algorithm written in Python and using the Mesa package. Furthermore, Agents.jl has a considerably simpler API which reduces the learning curve. Mesa, on the other hand, is much stronger in visualizing the simulations.","category":"page"},{"location":"mesa/#","page":"Comparison against Mesa (Python)","title":"Comparison against Mesa (Python)","text":"Here is a benchmark of a version of the forest fire model implemented both in Agents.jl and in Mesa. This version of the model is simpler than the one in the examples folder. The Python implementation is taken from Mesa's Github page. The Julia implementation follows the same logic as the Python implementation. The code for both implementations is in the test/benchmark/mesa folder on Agents.jl's Github page.","category":"page"},{"location":"mesa/#","page":"Comparison against Mesa (Python)","title":"Comparison against Mesa (Python)","text":"Briefly, the model has two parameters: grid size and forest density. It initially plants trees on the grid given the density. Next, it sets trees on one edge of the forest on fire. During each iteration, neighboring trees to a tree on fire catch fire and those trees already on fire burn down. There is no growth of trees.","category":"page"},{"location":"mesa/#","page":"Comparison against Mesa (Python)","title":"Comparison against Mesa (Python)","text":"Figure below shows the time it takes for 100 iterations of a \"forest fire\" model with a density of 0.6 in Mesa and Agents.jl. The x-axis of the figure is different grid sizes. The model implemented in Agents.jl is up to more than 13 times faster than the model implemented in Mesa.","category":"page"},{"location":"mesa/#","page":"Comparison against Mesa (Python)","title":"Comparison against Mesa (Python)","text":"(Image: Speed comparison of a version of \"forest fire\" model in Agents.jl vs Mesa.)","category":"page"},{"location":"mesa/#","page":"Comparison against Mesa (Python)","title":"Comparison against Mesa (Python)","text":"Here are the relative numbers: (Image: Relative speed comparison of a version of \"forest fire\" model in Agents.jl vs Mesa.)","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"EditURL = \"https://github.com/JuliaDynamics/Agents.jl/blob/master/examples/game_of_life_2D_CA.jl\"","category":"page"},{"location":"examples/game_of_life_2D_CA/#Two-dimensional-cellular-automata-1","page":"Game of life","title":"Two-dimensional cellular automata","text":"","category":"section"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"Agents.jl provides a module (CA2D) to create and plot 2D cellular automata.","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"using Agents\nusing AgentsPlots\nusing Agents.CA2D","category":"page"},{"location":"examples/game_of_life_2D_CA/#.-Define-the-rule-1","page":"Game of life","title":"1. Define the rule","text":"","category":"section"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"Rules of Conway's game of life: DSR (Death, Survival, Reproduction). Cells die if the number of their living neighbors are <D, survive if the number of their living neighbors are <=S, come to life if their living neighbors are as many as R.","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"rules = (2,3,3)","category":"page"},{"location":"examples/game_of_life_2D_CA/#.-Build-the-model-1","page":"Game of life","title":"2. Build the model","text":"","category":"section"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"\"CA2D.build_model\" creates a model where all cells are by default off (\"0\")","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"model = CA2D.build_model(rules=rules, dims=(100, 100), Moore=true)","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"Let's make some random cells on","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"for i in 1:nv(model)\n  if rand() < 0.1\n    model.agents[i].status=\"1\"\n  end\nend","category":"page"},{"location":"examples/game_of_life_2D_CA/#.-Animate-the-model-1","page":"Game of life","title":"3. Animate the model","text":"","category":"section"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"Animations of 2D Cellular Automata are done through the following syntax: (plot_CA2Dgif is a function from AgentsPlots that creates the animation)","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"runs = 10\nanim = CA2D.ca_run(model, runs, plot_CA2Dgif);\nnothing #hide","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"We can now save the animation to a gif.","category":"page"},{"location":"examples/game_of_life_2D_CA/#","page":"Game of life","title":"Game of life","text":"AgentsPlots.gif(anim, \"game_of_life.gif\")","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"EditURL = \"https://github.com/JuliaDynamics/Agents.jl/blob/master/examples/schelling.jl\"","category":"page"},{"location":"examples/schelling/#Schelling's-segregation-model-1","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"In this introductory example we demonstrate Agents.jl's architecture and features through building the following definition of Schelling's segregation model:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Agents belong to one of two groups (0 or 1).\nThe agents live in a two-dimensional Moore grid (8 neighbors per node).\nIf an agent is in the same group with at least three neighbors, then it is happy.\nIf an agent is unhappy, it keeps moving to new locations until it is happy.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Schelling's model shows that even small preferences of agents to have neighbors belonging to the same group (e.g. preferring that at least 30% of neighbors to be in the same group) could lead to total segregation of neighborhoods.","category":"page"},{"location":"examples/schelling/#Defining-the-agent-type-1","page":"Schelling's segregation model","title":"Defining the agent type","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"using Agents\n\nmutable struct SchellingAgent <: AbstractAgent\n  id::Int # The identifier number of the agent\n  pos::Tuple{Int,Int} # The x, y location of the agent on a 2D grid\n  mood::Bool # whether the agent is happy in its node. (true = happy)\n  group::Int # The group of the agent,  determines mood as it interacts with neighbors\nend","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Notice that the position of this Agent type is a Tuple{Int,Int} because we will use a grid Space.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We added two more fields for this model, namely a mood field which will store true for a happy agent and false for an unhappy one, and an group field which stores 0 or 1 representing two groups.","category":"page"},{"location":"examples/schelling/#Creating-a-space-1","page":"Schelling's segregation model","title":"Creating a space","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"For this example, we will be using a Moore 2D grid, e.g.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"space = Space((10,10), moore = true)","category":"page"},{"location":"examples/schelling/#Creating-an-ABM-1","page":"Schelling's segregation model","title":"Creating an ABM","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"To make our model we follow the instructions of AgentBasedModel. We also want to include a property min_to_be_happy in our model, and so we have:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"properties = Dict(:min_to_be_happy => 3)\nschelling = ABM(SchellingAgent, space;\n                scheduler = fastest, properties = properties)","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Here we used the default scheduler (which is also the fastest one) to create the model. We could instead try to activate the agents according to their property :group, so that all agents of group 1 act first. We would then use the scheduler property_activation like so:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"schelling2 = ABM(SchellingAgent, space; properties = properties,\n                 scheduler = property_activation(:group))","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Notice that partial_activation accepts an argument and returns a function, which is why we didn't just give partial_activation to scheduler.","category":"page"},{"location":"examples/schelling/#Creating-the-ABM-through-a-function-1","page":"Schelling's segregation model","title":"Creating the ABM through a function","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Here we put the model instantiation in a function so that it will be easy to recreate the model and change its parameters.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"In addition, inside this function, we populate the model with some agents. We also change the scheduler to random_activation. Because the function is defined based on keywords, it will be of further use in paramscan below.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"function initialize(;numagents=320, griddims=(20, 20), min_to_be_happy=3)\n    space = Space(griddims, moore = true)\n    properties = Dict(:min_to_be_happy => 3)\n    model = ABM(SchellingAgent, space; properties=properties, scheduler = random_activation)\n    # populate the model with agents, adding equal amount of the two types of agents\n    # at random positions in the model\n    for n in 1:numagents\n        agent = SchellingAgent(n, (1,1), false, n < numagents/2 ? 1 : 2)\n        add_agent_single!(agent, model)\n    end\n    return model\nend","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Notice that the position that an agent is initialized does not matter in this example. This is because it is set properly when adding an agent to the model.","category":"page"},{"location":"examples/schelling/#Defining-a-step-function-1","page":"Schelling's segregation model","title":"Defining a step function","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Finally, we define a step function to determine what happens to an agent when activated.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"function agent_step!(agent, model)\n    agent.mood == true && return # do nothing if already happy\n    minhappy = model.properties[:min_to_be_happy]\n    neighbor_cells = node_neighbors(agent, model)\n    count_neighbors_same_group = 0\n    # For each neighbor, get group and compare to current agent's group\n    # and increment count_neighbors_same_group as appropriately.\n    for neighbor_cell in neighbor_cells\n        node_contents = get_node_contents(neighbor_cell, model)\n        # Skip iteration if the node is empty.\n        length(node_contents) == 0 && continue\n        # Otherwise, get the first agent in the node...\n        agent_id = node_contents[1]\n        # ...and increment count_neighbors_same_group if the neighbor's group is\n        # the same.\n        neighbor_agent_group = model.agents[agent_id].group\n        if neighbor_agent_group == agent.group\n            count_neighbors_same_group += 1\n        end\n    end\n    # After counting the neighbors, decide whether or not to move the agent.\n    # If count_neighbors_same_group is at least the min_to_be_happy, set the\n    # mood to true. Otherwise, move the agent to a random node.\n    if count_neighbors_same_group ≥ minhappy\n        agent.mood = true\n    else\n        move_agent_single!(agent, model)\n    end\n    return\nend","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"For the purpose of this implementation of Schelling's segregation model, we only need an agent step function.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"For defining agent_step! we used some of the built-in functions of Agents.jl, such as node_neighbors that returns the neighboring nodes of the node on which the agent resides, get_node_contents that returns the IDs of the agents on a given node, and move_agent_single! which moves agents to random empty nodes on the grid. A full list of built-in functions and their explanations are available in the API page.","category":"page"},{"location":"examples/schelling/#Running-the-model-1","page":"Schelling's segregation model","title":"Running the model","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Let's initialize the model with 370 agents on a 20 by 20 grid.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"model = initialize()","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We can run the model for one step","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"step!(model, agent_step!)     # run the model one step","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Or for three steps","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"step!(model, agent_step!, 3)  # run the model 3 steps.","category":"page"},{"location":"examples/schelling/#Running-the-model-and-collecting-data-1","page":"Schelling's segregation model","title":"Running the model and collecting data","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We can use the same step! function with more arguments to run multiple steps and collect values of our desired fields from every agent and put these data in a DataFrame object.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"model = initialize()","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We define an array of Symbols for the agent fields that we want to collect as data","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"properties = [:pos, :mood, :group]","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"And specify at which steps data should be collected.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"n = 5  # number of time steps to run the simulation\nwhen = 1:n  # At which steps to collect data","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Use the step! function to run the model and collect data into a DataFrame.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"data = step!(model, agent_step!, n, properties, when=when)\ndata[1:10, :] # print only a few rows","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"With the above properties vector, we collected all agents data. We can instead only collected aggregated data. For example, let's only get the number of happy individuals:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"model = initialize(numagents=370, griddims=(20,20), min_to_be_happy=3);\nproperties = Dict(:mood => [sum])\nn = 5; when = 1:n\ndata = step!(model, agent_step!, 5, properties, when=when)","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"The other Examples pages are more realistic examples with a bit more meaningful data processing steps.","category":"page"},{"location":"examples/schelling/#Visualizing-the-data-1","page":"Schelling's segregation model","title":"Visualizing the data","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We can use the plot2D function to plot the distribution of agents on a 2D grid at every generation, via the AgentsPLots package","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"using AgentsPlots\nproperties = [:pos, :mood, :group]\ndata = step!(model, agent_step!, 10, properties)\np = plot2D(data, :group, t=1, nodesize=10)","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Notice that to see this plot we need the \"raw\" data, not the aggregated data","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"p = plot2D(data, :group, t=2, nodesize=10)","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"The first argument of the plot2D is the output data. The second argument is the column name in data that has the categories of each agent, which is :group in this case. nodesize determines the size of cells in the plot.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Custom plots can be easily made with DataVoyager because the outputs of simulations are always as a DataFrame object.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"using DataVoyager\nv = Voyager(data)","category":"page"},{"location":"examples/schelling/#Replicates-and-parallel-computing-1","page":"Schelling's segregation model","title":"Replicates and parallel computing","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We can run replicates of a simulation and collect all of them in a single DataFrame. To that end, we only need to specify replicates the step! function:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"model = initialize(numagents=370, griddims=(20,20), min_to_be_happy=3);\ndata = step!(model, agent_step!, 5, properties, when=when, replicates=3)\ndata[end-10:end, :]","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"It is possible to run the replicates in parallel. For that, we should start julia with julia -p n where is the number of processing cores. Alternatively, we can define the number of cores from within a Julia session:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"using Distributed\naddprocs(4)","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"For distributed computing to work, all definitions must be preceded with @everywhere, e.g.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"@everywhere using Agents\n@everywhere mutable struct SchellingAgent ...","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Then we can tell the step! function to run replicates in parallel:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"data = step!(model, agent_step!, 2, properties,\n             when=when, replicates=5, parallel=true)","category":"page"},{"location":"examples/schelling/#Scanning-parameter-ranges-1","page":"Schelling's segregation model","title":"Scanning parameter ranges","text":"","category":"section"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We often are interested in the effect of different parameters on the behavior of an agent-based model. Agents.jl provides the function paramscan to automatically explore the effect of different parameter values.","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We have already defined our model initialization function as initialize. We now also define a processing function, that returns the percentage of happy agents:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"happyperc(moods) = count(x -> x == true, moods)/length(moods)\n\nproperties= Dict(:mood=>[happyperc])\nparameters = Dict(:min_to_be_happy=>collect(2:5), :numagents=>[200,300], :griddims=>(20,20))\n\ndata = paramscan(parameters, initialize;\n       properties=properties, n = 3, agent_step! = agent_step!)","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"paramscan also allows running replicates per parameter setting:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"data = paramscan(parameters, initialize; properties=properties, n = 3,\n                 agent_step! = agent_step!, replicates=3)\n\ndata[end-10:end, :]","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"We can combine all replicates with an aggregating function, such as mean, using the aggregate function from the DataFrames package:","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"using DataFrames: Not, select!\nusing Statistics: mean\ndata_mean = Agents.aggregate(data, [:step, :min_to_be_happy, :numagents],  mean);\nselect!(data_mean, Not(:replicate_mean))","category":"page"},{"location":"examples/schelling/#","page":"Schelling's segregation model","title":"Schelling's segregation model","text":"Note that the second argument takes the column names on which to split the data, i.e., it denotes which columns should not be aggregated. It should include the :step column and any parameter that changes among simulations. But it should not include the :replicate column. So in principle wha we are doing here is simply averaging our result across the replicates.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"EditURL = \"https://github.com/JuliaDynamics/Agents.jl/blob/master/examples/HK.jl\"","category":"page"},{"location":"examples/HK/#HK-(Hegselmann-and-Krause)-opinion-dynamics-model-1","page":"Hegselmann-Krause opinion dynamics","title":"HK (Hegselmann and Krause) opinion dynamics model","text":"","category":"section"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"This is an implementation of a simple version of the Hegselmann and Krause (2002) model, which also features synchronous updating of Agent properties.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"It is a model of opinion formation with the question: which parameters' values lead to consensus, polarization or fragmentation? It models interacting groups of agents (as opposed to interacting pairs, typical in the literature) in which it is assumed that if an agent disagrees too much with the opinion of a source of influence, the source can no longer influence the agent’s opinion. There is then a \"bound of confidence\". The model shows that the systemic configuration is heavily dependent on this parameter's value.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"We implement it as an example of how to implement a Synchronous update schedule . In a Synchronous update schedule changes made to an agent are not seen by other agents until the next clock tick — that is, all agents update simultaneously (Wilensky 2015, p.286).","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"The model has the following components:","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"A set of n Agents with opinions xᵢ in the range [0,1] as attribute;\nA bound ϵ in also in the range [0,1] (actually, the range of interesting results is approximately (0, 0.3]);\nThe update rule: at each step every agent adopts the mean of the opinions which are within the confidence bound ( |xᵢ - xⱼ| ≤ ϵ).","category":"page"},{"location":"examples/HK/#Core-structures-1","page":"Hegselmann-Krause opinion dynamics","title":"Core structures","text":"","category":"section"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"We start by defining the Agent type and initializing the model. The Agent type has two fields so that we can implement the synchronous update.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"using Agents\nusing Statistics: mean\n\nmutable struct HKAgent{T <: AbstractFloat} <: AbstractAgent\n    id::Int\n    old_opinion::T\n    new_opinion::T\nend\n\nfunction hk_model(;numagents = 100, ϵ = 0.4)\n    model = ABM(HKAgent, scheduler = fastest,\n                properties = Dict(:ϵ => ϵ))\n    for i in 1:numagents\n        o = rand()\n        add_agent!(model, o, o)\n    end\n    return model\nend","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"And some helper functions for the update rule. As there is a filter in the rule we implement it outside the agent_step! method. Notice that the filter is applied to the :old_opinion field.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"get_old_opinion(agent)::Float64 = agent.old_opinion\n\nfunction boundfilter(agent,model)\n    filter(j->abs(get_old_opinion(agent) - j) < model.properties[:ϵ],\n     get_old_opinion.(values(model.agents)))\nend","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"Now we implement the agent_step! and model_step! methods.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"function agent_step!(agent, model)\n    agent.new_opinion = mean(boundfilter(agent,model))\nend\n\nfunction updateold(a)\n    a.old_opinion = a.new_opinion\n    return a\nend\n\nfunction model_step!(model)\n    for i in keys(model.agents)\n        agent = id2agent(i, model)\n        updateold(agent)\n    end\nend","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"From this implementation we see that to implement synchronous scheduling we define an Agent type with an old and new fields for attributes that are changed through synchronous updating. In agent_step! we use the old field and after updating all the agents new field we use the model_step! to update the model  for the next iteration.","category":"page"},{"location":"examples/HK/#Running-the-model-1","page":"Hegselmann-Krause opinion dynamics","title":"Running the model","text":"","category":"section"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"Now we can define a method for our simulation run. The parameter of interest is the :new_opinion field so we assign it to variable agent_properties and pass it to the step! method to be collected in a DataFrame.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"function model_run(; numagents = 100, iterations = 50, ϵ= 0.05)\n    model = hk_model(numagents = numagents, ϵ = ϵ)\n    when = 0:5:iterations\n    agent_properties = [:new_opinion]\n    data = step!(\n            model,\n            agent_step!,\n            model_step!,\n            iterations,\n            agent_properties,\n            when = when\n            )\n    return(data)\nend\n\ndata = model_run(numagents = 10, iterations = 20)\ndata[end-19:end, :]","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"Finally we run three scenarios, collect the data and plot it.","category":"page"},{"location":"examples/HK/#","page":"Hegselmann-Krause opinion dynamics","title":"Hegselmann-Krause opinion dynamics","text":"using Plots\n\nplotsim(data, ϵ) = plot(\n                        data[!, :step],\n                        data[!, :new_opinion],\n                        leg= false,\n                        group = data[!, :id],\n                        title = \"epsilon = $(ϵ)\"\n                        )\n\nplt001,plt015,plt03 = map(\n                          e -> (model_run(ϵ= e), e) |>\n                          t -> plotsim(t[1], t[2]),\n                          [0.05, 0.15, 0.3]\n                          )\n\nplot(plt001, plt015, plt03, layout = (3,1))","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"EditURL = \"https://github.com/JuliaDynamics/Agents.jl/blob/master/examples/wright-fisher.jl\"","category":"page"},{"location":"examples/wright-fisher/#Wright-Fisher-model-of-evolution-1","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"","category":"section"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"This is one of the simplest models of population genetics that demonstrates the use of sample!. We implement a simple case of the model where we study haploids (cells with a single set of chromosomes) while for simplicity focusing only on one locus (a specific gene). In this example we will be dealing with a population of constant size.","category":"page"},{"location":"examples/wright-fisher/#A-neutral-model-1","page":"Wright-Fisher model of evolution","title":"A neutral model","text":"","category":"section"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"Imagine a population of n haploid individuals.\nAt each generation, n offsprings replace the parents.\nEach offspring chooses a parent at random and inherits its genetic material.","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"using Agents\nn = 100","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"Let's define an agent. The genetic value of an agent is a number (trait field).","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"mutable struct Haploid <: AbstractAgent\n    id::Int\n    trait::Float64\nend","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"And make a model without any spatial structure:","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"m = ABM(Haploid)","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"Create n random individuals:","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"for i in 1:n\n    add_agent!(m, rand())\nend","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"To create a new generation, we can use the sample! function. It chooses random individuals with replacement from the current individuals and updates the model. For example:","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"sample!(m, nagents(m))","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"The model can be run for many generations and we can collect the average trait value of the population. To do this we will use a model-step function (see step!) that utilizes sample!:","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"modelstep_neutral!(m) = sample!(m, nagents(m))","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"We can now run the model and collect data. We use dummystep for the agent-step function (as the agents perform no actions).","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"using Statistics: mean\n\ndata = step!(m, dummystep, modelstep_neutral!, 20, Dict(:trait => [mean]))","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"As expected, the average value of the \"trait\" remains around 0.5.","category":"page"},{"location":"examples/wright-fisher/#A-model-with-selection-1","page":"Wright-Fisher model of evolution","title":"A model with selection","text":"","category":"section"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"We can sample individuals according to their trait values, supposing that their fitness is correlated with their trait values.","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"m = ABM(Haploid)\nfor i in 1:100\n    add_agent!(m, rand())\nend\n\nmodelstep_selection!(m::ABM) = sample!(m, nagents(m), :trait)\n\ndata = step!(m, dummystep, modelstep_selection!, 20, Dict(:trait => [mean]))","category":"page"},{"location":"examples/wright-fisher/#","page":"Wright-Fisher model of evolution","title":"Wright-Fisher model of evolution","text":"Here we see that as time progresses the trait comes closer and closer to 1, which is expected as agents with higher traits have higher probability of being sampled for the next \"generation\".","category":"page"},{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"The core API is defined by AgentBasedModel, Space, AbstractAgent and step!, which are described in the Tutorial page. The functionality described here builds on top of the core API.","category":"page"},{"location":"api/#Model-and-space-information-1","page":"API","title":"Model and space information","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"nv(::ABM)\nne(::ABM)\nhas_empty_nodes\nfind_empty_nodes","category":"page"},{"location":"api/#LightGraphs.nv-Tuple{AgentBasedModel}","page":"API","title":"LightGraphs.nv","text":"nv(model::ABM)\n\nReturn the number of nodes (vertices) in the model space.\n\n\n\n\n\n","category":"method"},{"location":"api/#LightGraphs.ne-Tuple{AgentBasedModel}","page":"API","title":"LightGraphs.ne","text":"ne(model::ABM)\n\nReturn the number of edges in the model space.\n\n\n\n\n\n","category":"method"},{"location":"api/#Agents.has_empty_nodes","page":"API","title":"Agents.has_empty_nodes","text":"has_empty_nodes(model)\n\nReturn true if there are empty nodes in the model.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.find_empty_nodes","page":"API","title":"Agents.find_empty_nodes","text":"find_empty_nodes(model::ABM)\n\nReturns the IDs of empty nodes on the model space.\n\n\n\n\n\n","category":"function"},{"location":"api/#Content-from-a-node-1","page":"API","title":"Content from a node","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"node_neighbors\npick_empty\nget_node_contents\nisempty(::Integer, ::ABM)","category":"page"},{"location":"api/#Agents.node_neighbors","page":"API","title":"Agents.node_neighbors","text":"node_neighbors(agent::AbstractAgent, model::ABM)\nnode_neighbors(node::Int, model::ABM)\n\nReturn neighboring node coordinates/numbers of the node on which the agent resides.\n\nIf the model's space is GraphSpace, then the function will return node numbers. If space is GridSpace then the neighbors are returned as coordinates (tuples).\n\n\n\n\n\nnode_neighbors(node_number::Integer, model::ABM, radius::Integer)\n\nReturns a list of neighboring nodes to the node node_number within the radius. radius defines higher degree neighbors. For example, neighbors with a radius=2 include first and second degree neighbors, that is, neighbors and neighbors of neighbors.\n\nNotice that node_neighbors excludes the node that is given.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.pick_empty","page":"API","title":"Agents.pick_empty","text":"pick_empty(model)\n\nReturn the ID of a random empty node or 0 if there are no empty nodes.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.get_node_contents","page":"API","title":"Agents.get_node_contents","text":"get_node_contents(n::Integer, model)\n\nReturn the ids of agents in the node n of the model.\n\n\n\n\n\nget_node_contents(agent::AbstractAgent, model)\n\nReturn all agents' ids in the same node as the agent (including the agent's own id).\n\n\n\n\n\nget_node_contents(coords::Tuple, model)\n\nReturn the ids of agents in the node at coords.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.isempty-Tuple{Integer,AgentBasedModel}","page":"API","title":"Base.isempty","text":"isempty(node::Int, model::ABM)\n\nReturn true if there are no agents in node.\n\n\n\n\n\n","category":"method"},{"location":"api/#Agent-information-and-retrieval-1","page":"API","title":"Agent information and retrieval","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"nagents\nid2agent\nrandom_agent","category":"page"},{"location":"api/#Agents.nagents","page":"API","title":"Agents.nagents","text":"nagents(model::ABM)\n\nReturn the number of agents in the model.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.id2agent","page":"API","title":"Agents.id2agent","text":"id2agent(id::Integer, model)\n\nReturn an agent given its ID.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.random_agent","page":"API","title":"Agents.random_agent","text":"random_agent(model)\n\nReturn a random agent from the model.\n\n\n\n\n\n","category":"function"},{"location":"api/#Model-Agent-interaction-1","page":"API","title":"Model-Agent interaction","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"add_agent!\nadd_agent_pos!\nadd_agent_single!\nmove_agent!\nmove_agent_single!\nkill_agent!\ngenocide!","category":"page"},{"location":"api/#Agents.add_agent!","page":"API","title":"Agents.add_agent!","text":"add_agent!(agent::AbstractAgent [, pos], model::ABM) → agent\n\nAdd the agent to the pos in the space and to the list of agents. If pos is not given, the agent is added to a random position. The agent's position is always updated to match pos.\n\n\n\n\n\nadd_agent!(node, model::ABM, properties...)\n\nAdd a new agent in the given node, by constructing the agent type of the model and propagating all extra properties to the constructor.\n\nNotice that this function takes care of setting the agent's id and position and thus properties... is propagated to other fields the agent has.\n\nExample\n\nusing Agents\nmutable struct Agent <: AbstractAgent\n    id::Int\n    w::Float64\nend\nm = ABM(Agent) # model without spatial structure\nadd_agent!(m, 1, rand()) # incorrect: id is set internally\nadd_agent!(m, rand()) # correct: weight becomes rand()\n\n\n\n\n\nadd_agent!(model::ABM, properties...)\n\nSimilar with add_agent!(node, model, properties...), but adds the created agent to a random node. This function also works for models without a spatial structure.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.add_agent_pos!","page":"API","title":"Agents.add_agent_pos!","text":"add_agent_pos!(agent::AbstractAgent, model::ABM)\n\nAdd the agent to the model at the agent's own position if the agent has a position, or to a random position otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.add_agent_single!","page":"API","title":"Agents.add_agent_single!","text":"add_agent_single!(agent::AbstractAgent, model::ABM) → agent\n\nAdd agent to a random node in the space while respecting a maximum one agent per node. This function does not do anything if there are no empty nodes.\n\nReturn the new agent.\n\n\n\n\n\nadd_agent_single!(model::ABM, properties...)\n\nSame as add_agent!(model, properties...) but ensures that it adds an agent into a node with no other agents (does nothing if no such node exists).\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.move_agent!","page":"API","title":"Agents.move_agent!","text":"move_agent!(agent::AbstractAgent [, pos], model::ABM) → agent\n\nAdd agentID to the new position pos (either tuple or integer) in the model and remove it from the old position (also update the agent to have the new position).\n\nIf pos is a tuple, it represents the coordinates of the grid node. If pos is an integer, it represents the node number in the graph. If pos is not given, the agent is moved to a random position on the grid.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.move_agent_single!","page":"API","title":"Agents.move_agent_single!","text":"move_agent_single!(agent::AbstractAgent, model::ABM)\n\nMove agent to a random nodes on the grid while respecting a maximum of one agent per node. If there are no empty nodes, the agent wont move.\n\nReturn the agent's new position.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.kill_agent!","page":"API","title":"Agents.kill_agent!","text":"kill_agent!(agent::AbstractAgent, model::ABM)\n\nRemove an agent from model, and from the space if the model has a space.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.genocide!","page":"API","title":"Agents.genocide!","text":"genocide!(model::ABM)\n\nKill all the agents of the model.\n\n\n\n\n\ngenocide!(model::ABM, n::Int)\n\nKill the agents of the model whose IDs are larger than n.\n\n\n\n\n\n","category":"function"},{"location":"api/#Simulations-1","page":"API","title":"Simulations","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"The central simulation function is step!, which is mentioned in our Tutorial. But there are other functions that are related to simulations listed here.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"paramscan\nsample!","category":"page"},{"location":"api/#Agents.paramscan","page":"API","title":"Agents.paramscan","text":"paramscan(parameters, initialize; kwargs...)\n\nRun the model with all the parameter value combinations given in parameters, while initializing the model with initialize. This function uses DrWatson's dict_list internally. This means that every entry of parameters that is a Vector, contains many parameters and thus is scanned. All other entries of parameters that are not Vectors are not expanded in the scan.\n\ninitialize is a function that creates an ABM. It should accept keyword arguments.\n\nKeywords\n\nAll the following keywords are propagated into step!: agent_step!, properties, n, when = 1:n, model_step! = dummystep, step0::Bool = true, parallel::Bool = false, replicates::Int = 0.\n\nThe following keywords modify the paramscan function:\n\ninclude_constants::Bool=false determines whether constant parameters should be included in the output DataFrame.\n\nprogress::Bool = true whether to show the progress of simulations.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.sample!","page":"API","title":"Agents.sample!","text":"sample!(model::ABM, n [, weight]; kwargs...)\n\nReplace the agents of the model with a random sample of the current agents with size n.\n\nOptionally, choose an agent property weight (Symbol) to weight the sampling. This means that the higher the weight of the agent, the higher the probability that this agent will be chosen in the new sampling.\n\nKeywords\n\nreplace = true : whether sampling is performed with replacement, i.e. all agents can be chosen more than once.\nrng = GLOBAL_RNG : a random number generator to perform the sampling with.\n\nSee the Wright-Fisher example in the documentation for an application of sample!.\n\n\n\n\n\n","category":"function"},{"location":"api/#Iteration-1","page":"API","title":"Iteration","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"NodeIterator\nnodes","category":"page"},{"location":"api/#Agents.NodeIterator","page":"API","title":"Agents.NodeIterator","text":"NodeIterator(model) → iterator\n\nCreate an iterator that returns node coordinates, if the space is a grid, or otherwise node number, and the agent IDs in each node.\n\n\n\n\n\n","category":"type"},{"location":"api/#Agents.nodes","page":"API","title":"Agents.nodes","text":"nodes(model; by = :id) -> ns\n\nReturn a vector of the node ids of the model that you can iterate over. The ns are sorted depending on by:\n\n:id - just sorted by their number\n:random - randomly sorted\n:population - nodes are sorted depending on how many agents they accommodate. The more populated nodes are first.\n\n\n\n\n\n","category":"function"},{"location":"api/#Schedulers-1","page":"API","title":"Schedulers","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"The schedulers of Agents.jl have a very simple interface. All schedulers are functions, that take as an input the ABM and return an iterator over agent IDs. Notice that this iterator can be a \"true\" iterator or can be just a standard vector of IDs. You can define your own scheduler according to this API and use it when making an AgentBasedModel.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"fastest\nby_id\nrandom_activation\npartial_activation\nproperty_activation","category":"page"},{"location":"api/#Agents.fastest","page":"API","title":"Agents.fastest","text":"fastest\n\nActivate all agents once per step in the order dictated by the agent's container, which is arbitrary (the keys sequence of a dictionary). This is the fastest way to activate all agents once per step.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.by_id","page":"API","title":"Agents.by_id","text":"by_id\n\nActivate agents at each step according to their id.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.random_activation","page":"API","title":"Agents.random_activation","text":"random_activation\n\nActivate agents once per step in a random order. Different random ordering is used at each different step.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.partial_activation","page":"API","title":"Agents.partial_activation","text":"partial_activation(p)\n\nAt each step, activate only p percentage of randomly chosen agents.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.property_activation","page":"API","title":"Agents.property_activation","text":"property_activation(property)\n\nAt each step, activate the agents in an order dictated by their property, with agents with greater property acting first. property is a Symbol, which just dictates which field the agents to compare.\n\n\n\n\n\n","category":"function"},{"location":"api/#Utilities-1","page":"API","title":"Utilities","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"coord2vertex\nvertex2coord","category":"page"},{"location":"api/#Agents.coord2vertex","page":"API","title":"Agents.coord2vertex","text":"coord2vertex(coord::NTuple{Int}, model_or_space) → n\ncoord2vertex(coord::AbstractAgent, model_or_space) → n\n\nReturn the node number n of the given coordinates or the agent's position.\n\n\n\n\n\n","category":"function"},{"location":"api/#Agents.vertex2coord","page":"API","title":"Agents.vertex2coord","text":"vertex2coord(vertex::Integer, model_or_space) → coords\n\nReturns the coordinates of a node given its number on the graph.\n\n\n\n\n\n","category":"function"},{"location":"api/#Parallelization-1","page":"API","title":"Parallelization","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"parallel_replicates","category":"page"},{"location":"api/#Agents.parallel_replicates","page":"API","title":"Agents.parallel_replicates","text":"parallel_replicates(agent_step!, model::ABM, n::Integer, agent_properties::Array{Symbol}, when::AbstractArray{Integer}, replicates::Integer)\n\nRuns replicates number of simulations in parallel and returns a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting-1","page":"API","title":"Plotting","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Plotting functionality comes from AgentsPlots, which uses Plots.jl. You need to install both AgentsPlots, as well as a plotting backend (we use GR) to use the following functions.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"plot2D\nplot_CA1D\nplot_CA2D\nplot_CA2Dgif","category":"page"},{"location":"api/#AgentsPlots.plot2D","page":"API","title":"AgentsPlots.plot2D","text":"plot2D(node_coords::AbstractArray, colors::AbstractArray; kwargs...)\n\nCreates a scatter plot for nodes and their colors\n\nnode_coords: node positions as coordinates\ncolors: color of each node\n\nKeywords\n\nnodesize=1.0\nmarkeralpha = nothing\n\n\n\n\n\nplot2D(data::AbstractDataFrame, status_column::Symbol; kwargs)\n\nPlots the distribution of agents on a 2D grid. Agent positions should be saved as tuples.\n\ndata: A dataframe output of your simulation.\nstatus_column: the name of a column that determines category of each agent,  so that it is colored differently.\n\nKeywords\n\ncc::Dict=Dict() Optionally provide a color name for each unique value in the status_column\nnodesize=1.0 size of each node\nt=0 the time step of the simulation to plot.\n\n\n\n\n\n","category":"function"},{"location":"api/#AgentsPlots.plot_CA1D","page":"API","title":"AgentsPlots.plot_CA1D","text":"plot_CA1D(data; Keywords)\n\nVisualizes data of a 1D cellular automaton.\n\ndata: output of CA1D.ca_run.\n\nKeywords\n\nnodesize=2.0: Size of each cell.\n\n\n\n\n\n","category":"function"},{"location":"api/#AgentsPlots.plot_CA2D","page":"API","title":"AgentsPlots.plot_CA2D","text":"plot_CA2D(data; kwargs...)\n\nVisualizes data of a 2D cellular automaton.\n\ndata: output of CA2D.ca_run.\n\nKeywords\n\nt=nothing : The time step to be plotted. If nothing, all the rows in data are used.\nnodesize=2.0\n\n\n\n\n\n","category":"function"},{"location":"api/#AgentsPlots.plot_CA2Dgif","page":"API","title":"AgentsPlots.plot_CA2Dgif","text":"plot_CA2Dgif(data; kwargs...)\n\nCreate a 2D scatter plot from all data and adds a frame to the anim animation object. If anim is not provided, it creates a new one. Returns an animation object. It can be saved as an animated gif using AgentsPlots.gif(anim, \"filename.gif\").\n\ndata: output of of time-step of CA2D.ca_run.\n\nKeywords\n\nanim::Animation=Animation() : animation object. If provided, a new frame is added to it.\nnodesize=2.0\n\n\n\n\n\n","category":"function"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"EditURL = \"https://github.com/JuliaDynamics/Agents.jl/blob/master/examples/forest_fire.jl\"","category":"page"},{"location":"examples/forest_fire/#Forest-fire-model-1","page":"Forest fire","title":"Forest fire model","text":"","category":"section"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"The forest fire model is defined as a cellular automaton on a grid. A cell can be empty, occupied by a tree, or burning. The model of Drossel and Schwabl (1992) is defined by four rules which are executed simultaneously:","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"A burning cell turns into an empty cell\nA tree will burn if at least one neighbor is burning\nA tree ignites with probability f even if no neighbor is burning\nAn empty space fills with a tree with probability p","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"The forest has an innate density d, which is the proportion of trees initialized as green. This model is an example that does not have an agent_step! function. It only uses a model_step!","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"info: Cellular-automata-like ABMs\nThe forest fire model is a cellular automaton. Have a read at Agents.jl vs DynamicGrids.jl, which can do simulations with such systems faster than Agents.jl.","category":"page"},{"location":"examples/forest_fire/#Defining-the-core-structures-1","page":"Forest fire","title":"Defining the core structures","text":"","category":"section"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"We start by defining the agent type","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"using Agents, Random\n\nmutable struct Tree <: AbstractAgent\n    id::Int\n    pos::Tuple{Int, Int}\n    status::Bool  # true is green and false is burning\nend","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"The agent type Tree has three fields: id and pos, which have to be there for any agent, and a status field that we introduce for this specific model. The status field will hold true for a green tree and false for a burning one. All other model parameters go into the AgentBasedModel","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"We then make a setup function that initializes the model","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"function model_initiation(; f, d, p, griddims, seed = 111)\n    Random.seed!(seed)\n    space = Space(griddims, moore = true)\n    properties = Dict(:f => f, :d => d, :p => p)\n    forest = AgentBasedModel(Tree, space; properties=properties)\n\n    # create and add trees to each node with probability d,\n    # which determines the density of the forest\n    for node in nodes(forest)\n        if rand() ≤ forest.properties[:d]\n            add_agent!(node, forest, true)\n        end\n    end\n    return forest\nend\n\nforest = model_initiation(f=0.05, d=0.8, p=0.05, griddims=(20, 20), seed=2)","category":"page"},{"location":"examples/forest_fire/#Defining-the-step!-1","page":"Forest fire","title":"Defining the step!","text":"","category":"section"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"Because of the way the forest fire model is defined, we only need a stepping function for the model","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"function forest_step!(forest)\n  for node in nodes(forest, by = :random)\n    nc = get_node_contents(node, forest)\n    # the cell is empty, maybe a tree grows here\n    if length(nc) == 0\n        rand() ≤ forest.properties[:p] && add_agent!(node, forest, true)\n    else\n      tree = id2agent(nc[1], forest) # by definition only 1 agent per node\n      if tree.status == false  # if it is has been burning, remove it.\n        kill_agent!(tree, forest)\n      else\n        if rand() ≤ forest.properties[:f]  # the tree ignites spntaneously\n          tree.status = false\n        else  # if any neighbor is on fire, set this tree on fire too\n          for cell in node_neighbors(node, forest)\n            neighbors = get_node_contents(cell, forest)\n            length(neighbors) == 0 && continue\n            if any(n -> !forest.agents[n].status, neighbors)\n              tree.status = false\n              break\n            end\n          end\n        end\n      end\n    end\n  end\nend","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"as we discussed, there is no agent_step! function here, so we will just use dummystep.","category":"page"},{"location":"examples/forest_fire/#Running-the-model-1","page":"Forest fire","title":"Running the model","text":"","category":"section"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"step!(forest, dummystep, forest_step!)\nforest","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"step!(forest, dummystep, forest_step!, 10)\nforest","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"Now we can do some data collection as well using an aggregate function percentage:","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"forest = model_initiation(f=0.05, d=0.8, p=0.01, griddims=(20, 20), seed=2)\npercentage(x) = count(x)/nv(forest)\nagent_properties = Dict(:status => [percentage])\n\ndata = step!(forest, dummystep, forest_step!, 10, agent_properties)","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"Or we can just collect raw data without aggregation:","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"forest = model_initiation(f=0.05, d=0.8, p=0.01, griddims=(20, 20), seed=2)\nagent_properties = [:status, :pos]\n\ndata = step!(forest, dummystep, forest_step!, 10, agent_properties);\nnothing #hide","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"And plot the green and burning trees:","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"using AgentsPlots","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"At time 1","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"p = plot2D(data, :status, t=1, cc=Dict(true=>\"green\", false=>\"red\"), nodesize=8)","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"At time 2","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"p = plot2D(data, :status, t=2, cc=Dict(true=>\"green\", false=>\"red\"), nodesize=8)","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"Or we can run parallel/batch simulations","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"agent_properties = [:status, :pos]\ndata = step!(forest, dummystep, forest_step!, 10, agent_properties, replicates=10)","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"Remember that it is possible to explore a DataFrame visually and interactively through DataVoyager, by doing","category":"page"},{"location":"examples/forest_fire/#","page":"Forest fire","title":"Forest fire","text":"using DataVoyager\nVoyager(data)","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"EditURL = \"https://github.com/JuliaDynamics/Agents.jl/blob/master/examples/wealth_distribution.jl\"","category":"page"},{"location":"examples/wealth_distribution/#Wealth-distribution-model-1","page":"Wealth distribution","title":"Wealth distribution model","text":"","category":"section"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"This model is a simple agent-based economy that is modelled according to the work of Dragulescu et al.. This work introduces statistical mechanics concepts to study wealth distributions. For this reason what we show here is also referred to as \"Boltzmann wealth distribution\" model.","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"This model has a version with and without space. The rules of the space-less game are quite simple:","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"There is a pre-determined number of agents.\nAll agents start with one unit of wealth.\nAt every step an agent gives 1 unit of wealth (if they have it) to some other agent.","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"Even though these are some very simple rules, they can still create the basic properties of wealth distributions, e.g. power-laws distributions.","category":"page"},{"location":"examples/wealth_distribution/#Core-structures,-space-less-1","page":"Wealth distribution","title":"Core structures, space-less","text":"","category":"section"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"We start by defining the Agent type and initializing the model.","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"using Agents\nmutable struct WealthAgent <: AbstractAgent\n    id::Int\n    wealth::Int\nend","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"Notice that this agent does not have a pos field. That is okay, because there is no space structure to this example. We can also make a very simple AgentBasedModel for our model.","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"function wealth_model(;numagents = 100, initwealth = 1)\n    model = ABM(WealthAgent, scheduler=random_activation)\n    for i in 1:numagents\n        add_agent!(model, initwealth)\n    end\n    return model\nend\n\nmodel = wealth_model()","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"The next step is to define the agent step function","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"function agent_step!(agent, model)\n    agent.wealth == 0 && return # do nothing\n    ragent = random_agent(model)\n    agent.wealth -= 1\n    ragent.wealth += 1\nend","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"We use random_agent as a convenient way to just grab a random agent. (this may return the same agent as agent, but we don't care in the long run)","category":"page"},{"location":"examples/wealth_distribution/#Running-the-space-less-model-1","page":"Wealth distribution","title":"Running the space-less model","text":"","category":"section"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"Let's do some data collection, running a large model for a lot of time","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"N = 5\nM = 2000\nagent_properties = [:wealth]\nmodel = wealth_model(numagents=M)\ndata = step!(model, agent_step!, N, agent_properties)\ndata[end-20:end, :]","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"What we mostly care about is the distribution of wealth, which we can obtain for example by doing the following query:","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"wealths = filter(x -> x.step == N, data)[!, :wealth]","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"and then we can make a histogram of the result. With a simple visualization we immediatelly see the power-law distribution:","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"using UnicodePlots\nUnicodePlots.histogram(wealths)","category":"page"},{"location":"examples/wealth_distribution/#Core-structures,-with-space-1","page":"Wealth distribution","title":"Core structures, with space","text":"","category":"section"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"We now expand this model to (in this case) a 2D grid. The rules are the same but agents exchange wealth only with their neighbors. We therefore have to add a pos field as the second field of the agents:","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"mutable struct WealthInSpace <: AbstractAgent\n    id::Int\n    pos::NTuple{2, Int}\n    wealth::Int\nend\n\nfunction wealth_model_2D(;dims = (25,25), wealth = 1, M = 1000)\n  space = Space(dims, periodic = true)\n  model = ABM(WealthInSpace, space; scheduler = random_activation)\n  for i in 1:M # add agents in random nodes\n      add_agent!(model, wealth)\n  end\n  return model\nend\n\nmodel2D = wealth_model_2D()","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"The agent actions are a just a bit more complicated in this example. Now the agents can only give wealth to agents that exist on the same or neighboring nodes (their \"neighbhors\").","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"function agent_step_2d!(agent, model)\n    agent.wealth == 0 && return # do nothing\n    agent_node = coord2vertex(agent.pos, model)\n    neighboring_nodes = node_neighbors(agent_node, model)\n    push!(neighboring_nodes, agent_node) # also consider current node\n    rnode = rand(neighboring_nodes) # the node that we will exchange with\n    available_agents = get_node_contents(rnode, model)\n    if length(available_agents) > 0\n        random_neighbor_agent = id2agent(rand(available_agents), model)\n        agent.wealth -= 1\n        random_neighbor_agent.wealth += 1\n    end\nend","category":"page"},{"location":"examples/wealth_distribution/#Running-the-model-with-space-1","page":"Wealth distribution","title":"Running the model with space","text":"","category":"section"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"using Random\nRandom.seed!(5)\ninit_wealth = 4\nmodel = wealth_model_2D(;wealth = init_wealth)\nagent_properties = [:wealth, :pos]\ndata = step!(model, agent_step!, 10, agent_properties, when = [1, 5, 10], step0=false)\ndata[end-20:end, :]","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"Okay, now we want to get the 2D spatial wealth distribution of the model. That is actually straightforward:","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"function wealth_distr(data, model, n)\n    W = zeros(Int, size(model.space))\n    for row in eachrow(filter(r -> r.step == n, data)) # iterate over rows at a specific step\n        W[row.pos...] += row.wealth\n    end\n    return W\nend\n\nW1 = wealth_distr(data, model2D, 1)\nW5 = wealth_distr(data, model2D, 5)\nW10 = wealth_distr(data, model2D, 10)","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"using Plots\nPlots.heatmap(W1)","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"Plots.heatmap(W5)","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"Plots.heatmap(W10)","category":"page"},{"location":"examples/wealth_distribution/#","page":"Wealth distribution","title":"Wealth distribution","text":"What we see is that wealth gets more and more localized.","category":"page"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"EditURL = \"https://github.com/JuliaDynamics/Agents.jl/blob/master/examples/rule22_1D_CA.jl\"","category":"page"},{"location":"examples/rule22_1D_CA/#One-dimensional-cellular-automata-1","page":"Rule 22","title":"One-dimensional cellular automata","text":"","category":"section"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"Agents.jl provides a module (CA1D) to create and plot 1D cellular automata.","category":"page"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"using Agents\nusing Agents.CA1D\nusing AgentsPlots","category":"page"},{"location":"examples/rule22_1D_CA/#.-Define-the-rule-1","page":"Rule 22","title":"1. Define the rule","text":"","category":"section"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"Here is Wolfram's rule 22","category":"page"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"rules = Dict(\"111\"=>\"0\", \"110\"=>\"0\", \"101\"=>\"0\", \"100\"=>\"1\", \"011\"=>\"0\",\n            \"010\"=>\"1\", \"001\"=>\"1\", \"000\"=>\"0\")","category":"page"},{"location":"examples/rule22_1D_CA/#.-Build-the-model-1","page":"Rule 22","title":"2. Build the model","text":"","category":"section"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"All the cells are by default initially \"off\"","category":"page"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"model = CA1D.build_model(rules=rules, ncols=21)","category":"page"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"This turns on the middle cell","category":"page"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"model.agents[11].status=\"1\"","category":"page"},{"location":"examples/rule22_1D_CA/#.-Run-the-model-and-collect-data.-1","page":"Rule 22","title":"3. Run the model and collect data.","text":"","category":"section"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"runs = 20\ndata = CA1D.ca_run(model, runs);\nnothing #hide","category":"page"},{"location":"examples/rule22_1D_CA/#.-Visualize-the-data-1","page":"Rule 22","title":"4. Visualize the data","text":"","category":"section"},{"location":"examples/rule22_1D_CA/#","page":"Rule 22","title":"Rule 22","text":"p = plot_CA1D(data, nodesize=2)","category":"page"},{"location":"#Agents.jl-Documentation-1","page":"Introduction","title":"Agents.jl Documentation","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"(Image: Agents.jl)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"info: JuliaDynamics\nAgents.jl is part of JuliaDynamics, check out our website for more cool stuff!","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Agents.jl is a Julia framework for agent-based modeling (ABM). To get started, please read the Tutorial page.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"An agent-based (or individual-based) model is a computational simulation of autonomous agents that react to their environment (including other agents) given a predefined set of rules [1]. ABM has gained wide usage in a variety of research disciplines. One reason for its popularity is that it allows relaxing many simplifying assumptions usually made by mathematical models. Relaxing such assumptions of a \"perfect world\" can change a model's behavior [2]. ABM is specifically an important tool for studying complex systems where a system's behavior cannot be predicted and has to be explored (see the \"Why we need ABM\" section for detailed examples).","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Functionality","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Simple, intuitive model structure where agents are identified by a unique id: AgentBasedModel\nScheduler interface (with default schedulers), making it easy to activate agents in a specific order (e.g. by the value of some property)\nDefault grids to run the simulation (e.g. simple or toroidal regular rectangular and triangular in 1, 2 and 3D)\nUsers can use any arbitrary graph as a grid\nAutomatic data collection in a DataFrame at desired intervals\nAggregating collected data during model evolution\nDistributed computing\nBatch running and batch data collection\nVisualize agent distributions on regular grids","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Many agent-based modeling frameworks have been constructed to ease the process of building and analyzing ABMs (see here for a review). Notable examples are NetLogo, Repast, MASON, and Mesa.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Implementing an ABM framework in Julia has several advantages:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Using a general purpose programming language instead of a custom scripting language, such as NetLogo's, removes a learning step and provides a single environment for building the models and analyzing their results.\nJulia has a rich ecosystem for data analysis and visualization, implemented and maintained independently from Agents.jl.\nJulia is easier-to-use than Java (used for Repast and MASON), and provides a REPL (Read-Eval-Print-Loop) environment to build and analyze models interactively.\nUnlike Python (used for Mesa), Julia is fast to run. This is a crucial criterion for models that require considerable computations.\nBecause the direct output of Agents.jl is a DataFrame, it makes it easy to use tools as DataVoyager.jl, which provide an interactive environment to build custom plots from DataFrames. (and of course the DataFrame itself is a tabular data format similar to Python's Pandas).","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Agents.jl is lightweight and modular. It has a short learning curve, and allows one to extend its capabilities and express complicated modeling scenarios. Agents.jl is inspired by Mesa framework for Python.","category":"page"},{"location":"#Installation-1","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The package is in Julia's package list. Install it using this command:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"]add Agents","category":"page"},{"location":"#Why-we-need-agent-based-modeling-1","page":"Introduction","title":"Why we need agent-based modeling","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Agent-based models (ABMs) are increasingly recognized as the approach for studying complex systems [3,4,5,6]. Complex systems cannot be fully understood using the traditional mathematical tools that aggregate the behavior of elements in a system. The behavior of a complex system depends on the behavior and interaction of its elements (agents). Small changes in the input to complex systems or the behavior of its agents can lead to large changes in system's outcome. That is to say a complex system's behavior is nonlinear, and that it is not the sum of the behavior of its elements. Use of ABMs have become feasible after the availability of computers and has been growing since, especially in modeling biological and economical systems, and has extended to social studies and archaeology.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"An ABM consists of autonomous agents that behave given a set of rules. A classic example of an ABM is Schelling's segregation model, which we implement in the Tutorial page. This model also uses a regular grid and defines agents as the cells of the grid. Agents can be from different social groups. Agents are happy/unhappy based on the fraction of their neighbors that belong to the same group as they are. If they are unhappy, they keep moving to new locations until they are happy. Schelling's model shows that even small preferences of agents to have neighbors belonging to the same group (e.g. preferring that at least 30% of neighbors to be in the same group) could lead to total segregation of neighborhoods. This is another example of an emergent phenomenon from simple interactions of agents.","category":"page"},{"location":"#Agents.jl-vs-DynamicGrids.jl-1","page":"Introduction","title":"Agents.jl vs DynamicGrids.jl","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Agents.jl targets complicated ABMs that are defined on arbitrary complex graphs. Because of this, the core datastructure of this package is a dictionary that maps unique IDs to Agents, as shown in the Tutorial and specifically in AgentBasedModel. As all agents are unique entities, if one \"dies\" it is entirely and forever removed from memory. Similarly, when a new agent becomes \"alive\", this literally means that a new agent datastructure is initialized and added to this dictionary.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"This is not necessary for cellular-automata-like models, where the grid cell and the \"agent\" identity are fully equivalent, and the agents have a single \"property\". This is the case e.g. in the Forest fire and Game of life examples. For such applications the Julia package DynamicGrids.jl is more performant than Agents.jl (~2 orders of magnitude), while also allowing advanced visualization.","category":"page"},{"location":"#How-to-decide?-1","page":"Introduction","title":"How to decide?","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Use DynamicGrids.jl when your model lives on a rectangular grid, while the value of each grid cell does not have an identity (equivalently, the \"identity\" of each entity in your model is equivalent with its grid cell). Also use it for animating cellular automata.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Use Agents.jl if any of the following applies:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"You use individual agents whose identity (and other properties) is detached from their location\nMultiple agents can occupy the same location\nThe spatial model of your structure is an arbitrary graph instead of a rectangular grid\nThe agents have multiple values attached to them\nYou want the output of your simulation to be a DataFrame for easier further analysis\nYou care about stability (Agents.jl has a simpler API, is better documented and is stable)","category":"page"},{"location":"tutorial/#Tutorial-1","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Agents.jl is composed of components for building models, building and managing space structures, collecting data, running batch simulations, and data visualization.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Agents.jl structures simulations in three components: a model component that keeps all model-level variables and data, an agent component that keeps all agent-level variables and data, and a space component that represents the space where the agents live.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For building any Agent-Based-Model (ABM), users have to define at least the following four quantities:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"An AgentBasedModel instance.\nA Space instance.  \nA subtype of AbstractAgent for the agents.\nA stepping function that controls how the agents and the model evolve.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"With these, Agents.jl's tools manage the rest of the path to producing and processing data, as well as visualizations (Fig. 1).","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"(Image: Fig. 1. __Path from building a model to gaining information from the model using Agents.jl.__ The box in cyan is what the user has to provide and the boxes in green are what Agents.jl provides.)","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"(Image: Fig. 2. __Fields of a model object and their types.__)","category":"page"},{"location":"tutorial/#.-The-model-1","page":"Tutorial","title":"1. The model","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"AgentBasedModel","category":"page"},{"location":"tutorial/#Agents.AgentBasedModel","page":"Tutorial","title":"Agents.AgentBasedModel","text":"AgentBasedModel(agent_type [, space]; scheduler, properties)\n\nCreate an agent based model from the given agent type, and the space (from Space). ABM is equivalent with AgentBasedModel. The agents are stored in a dictionary model.agents, where the keys are the agent IDs, while the values are the agents themselves. It is recommended however to use id2agent to get an agent.\n\nspace can be omitted, in which it will equal to nothing. This means that all agents are virtualy in one node and have no spatial structure. If space is omitted, some functions that fascilitate agent-space interactions will not work.\n\nOptionally provide a scheduler that creates the order with which agents are activated in the model, and properties for additional model-level properties. This is accessed as model.properties for later use.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/#.-The-space-1","page":"Tutorial","title":"2. The space","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Under the hood, all spaces are represented by a graph from LightGraphs.jl. However, if your space is a regular grid then there is some additional functionality that allows converting graph nodes to coordinates on the multidimensional grid.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Regardless, in every case you initialize your space by calling Space:","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Space","category":"page"},{"location":"tutorial/#Agents.Space","page":"Tutorial","title":"Agents.Space","text":"Space(graph::AbstractGraph) -> GraphSpace\n\nCreate a space instance that is underlined by an arbitrary graph. In this case, your agent positions (field pos) should be of type Integer.\n\n\n\n\n\nSpace(dims::NTuple; periodic = false, moore = false) -> GridSpace\n\nCreate a space instance that represents a grid of dimensionality length(dims), with each dimension having the size of the corresponding entry of dims. In this case, your agent positions (field pos) should be of type NTuple{Int}.\n\nThe two keyword arguments denote if the grid should be periodic on its ends, and if the connections should be of type Moore or not (in the Moore case the diagonal connections are also valid. E.g. for a 2D grid, each node has 8 neighbors).\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#.-The-agent-1","page":"Tutorial","title":"3. The agent","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"AbstractAgent","category":"page"},{"location":"tutorial/#Agents.AbstractAgent","page":"Tutorial","title":"Agents.AbstractAgent","text":"All agents must be a mutable subtype of AbstractAgent. Your agent type must have at least the id field, and if there is a space structure the pos field, (fields are expected in this order)\n\nmutable struct MyAgent{P} <: AbstractAgent\n    id::Int\n    pos::P\nend\n\nOnly for grid spaces, pos can be an NTuple. For arbitrary graph spaces it must always be an integer (the graph node number).\n\nYour agent type may have other additional fields relevant to your system, for example variable quantities like \"status\" or other \"counters\".\n\n\n\n\n\n","category":"type"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The agent type must be mutable. Once an Agent is created it can be added to a model using e.g. add_agent!. Then, the agent can interact with the model and the space further by using e.g. move_agent! or kill_agent!.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"For more functions visit the API page.","category":"page"},{"location":"tutorial/#.-The-stepping-function-1","page":"Tutorial","title":"4. The stepping function","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Any ABM model should have at least one and at most two step functions. An agent step function is always required. Such an agent step function defines what happens to an agent when it activates. Sometimes we also need a function that changes all agents at once, or changes a model property. In such cases, we can also provide a model step function.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"An agent step function should only accept two arguments: first, an agent object, and second, a model object.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"The model step function should accept only one argument, that is the model object. To use only a model step function, users can use the built-in dummystep as the agent step function.","category":"page"},{"location":"tutorial/#.-Running-the-model-and-collecting-data-1","page":"Tutorial","title":"5. Running the model & collecting data","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"After the basic types and functions are defined, we can run the model using the built-in step! function. This will update the agents and the model as defined by the agent and model stepping functions. In addition, by providing keywords to step!, it is also possible to collect and process data while the model evolves.","category":"page"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Agents.step!","category":"page"},{"location":"tutorial/#Agents.step!","page":"Tutorial","title":"Agents.step!","text":"step!(model, agent_step! [, model_step!], n::Integer = 1)\n\nUpdate agents n steps. Agents will be updated as specified by the model.scheduler. If given the optional function model_step!, it is triggered after every scheduled agent has acted.\n\nstep!(model, agent_step! [, model_step!], n::Function)\n\nn can be also be a function that takes as an input the model and returns true/false. Then step! runs the model until n(model) returns true.\n\nstep!(model, agent_step! [, model_step!], n, properties; kwargs...)\n\nThis version of step!, with the properties argument and extra keywords, performs data collection/processing while running the model.\n\nproperties dictates which agent fields should be collected as data. It can be either an array, in which case, the specified fields of all agents will be saved. Or it can be a dictionary, in which case it should map agent fields (Symbol) to functions.\n\nIf properties is an array, each row of the output DataFrame corresponds to a single agent and each column is a requested field value.\n\nIf properties is a dictionary, each row of the output DataFrame corresponds to all agents and each column is the a function applied to a field. The functions in a dictionary properties are applied to the collected fields, that is, the keys of properties. For example, if your agents have a field called wealth, and you want to calculate mean and median population wealth at steps defined by when, your properties dict will be Dict(:wealth => [mean, median]).\n\nIf an agent field returns an array instead of a single number, the mean of that array will be calculated before the functions are applied to them.\n\nCollected data always also include the initial status of the model at step 0.\n\nTo apply a function to the list of agents, use :agent as a dictionary key. To apply a function to the model object, use :model as a dictionary key.\n\nKeywords\n\nwhen=1:n : at which steps n to perform the data collection and processing.\nreplicates : Optional. Run replicates replicates of the simulation. Defaults to 0.\nparallel : Optional. Only when replicates>0. Run replicate simulations in parallel. Defaults to false.\nstep0: Whether to collect data at step zero, before running the model. Defaults to true.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"Notice that besides step!, there is also the paramscan function that performs data collection, while scanning ranges of the parameters of the model.","category":"page"},{"location":"tutorial/#An-educative-example-1","page":"Tutorial","title":"An educative example","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorial","title":"Tutorial","text":"A simple, education-oriented example of using the basic Agents.jl API is given in Schelling's segregation model. There the visualization aspect is also discussed.","category":"page"}]
}
